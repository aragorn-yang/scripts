/*{
	"type": "action",
	"targets": ["omnifocus"],
	"author": "Aragorn Yang",
	"identifier": "com.omni-automation.of.push-out-defer-due-dates",
	"version": "1.2",
	"description": "Will add number of days to the defer/due date of each selected project/task.",
	"label": "Push Out Project/Task Defer/Due Dates",
	"shortLabel": "Push D/D Dates"
}*/
(() => {
    var action = new PlugIn.Action(function (selection, sender) {
        // action code
        // selection options: tasks, projects, folders, tags

        var dayChoices = [
            {label: "-1 day", days: -1,},
            {label: "0 day", days: 0,},
            {label: "1 day", days: 1,},
            {label: "2 days", days: 2,},
            {label: "1 week", days: 7,},
            {label: "4 weeks", days: 28,},
        ];

        var dayIndexes = []
        var dayIndexStrings = []
        var dayIndexesActualDays = []

        dayChoices.forEach(function (dayChoice, index) {
            dayIndexes.push(index);
            dayIndexStrings.push(dayChoice.label);
            dayIndexesActualDays.push(dayChoice.days);
        });

        var inputForm = new Form()
        inputForm.addField(new Form.Field.Option(
            "dayMenu",
            null,
            dayIndexes,
            dayIndexStrings,
            dayIndexesActualDays.indexOf(1)
        ))
        inputForm.addField(new Form.Field.Checkbox(
            "shouldIncludeDefers",
            "Push out deferment dates",
            true
        ))
        inputForm.addField(new Form.Field.Checkbox(
            "shouldIncludeDues",
            "Push out due dates",
            true
        ))
        inputForm.addField(new Form.Field.Checkbox(
            "forceNewDates",
            "Consider empty dates as today",
            false
        ))
        var formPrompt = "Number of days to add to defer/due dates:"
        var buttonTitle = "OK"
        var formPromise = inputForm.show(formPrompt, buttonTitle)

        inputForm.validate = function (formObject) {
            return true
        }

        formPromise.then(function (formObject) {
            var dayMenuIndex = formObject.values["dayMenu"]
            var pushoutDuration = dayIndexesActualDays[dayMenuIndex]
            var shouldIncludeDefers = formObject.values["shouldIncludeDefers"]
            var shouldIncludeDues = formObject.values["shouldIncludeDues"]
            var forceNewDates = formObject.values["forceNewDates"]
            var cal = Calendar.current
            var dc = new DateComponents()
            dc.day = pushoutDuration
            var pushDeferDate = item => {
                var currentDate = item.deferDate
                if (!currentDate && forceNewDates) {
                    currentDate = new Date()
                    currentDate.setHours(4, 0, 0, 0)
                }
                if (pushoutDuration === 0 && currentDate && currentDate.getHours() === 6) {
                    currentDate.setHours(4, 0, 0, 0)
                }
                if (currentDate) {
                    item.deferDate = cal.dateByAddingDateComponents(currentDate, dc)
                }
            }
            var pushDueDate = item => {
                var currentDate = item.dueDate
                if (!currentDate && forceNewDates) {
                    currentDate = new Date()
                    currentDate.setHours(20, 0, 0, 0)
                }
                if (pushoutDuration === 0 && currentDate && currentDate.getHours() === 22) {
                    currentDate.setHours(20, 0, 0, 0)
                }
                if (currentDate) {
                    item.dueDate = cal.dateByAddingDateComponents(currentDate, dc)
                }
            }

            var pushProject = proj => {
                if (shouldIncludeDefers) {
                    pushDeferDate(proj.task)
                }
                if (shouldIncludeDues) {
                    pushDueDate(proj.task)
                }
            }

            var pushTask = item => {
                if (shouldIncludeDefers) {
                    pushDeferDate(item)
                }
                if (shouldIncludeDues) {
                    pushDueDate(item)
                }
            }


            selection.projects.forEach(pushProject)
            selection.tasks.forEach(pushTask)
        })
    });

    action.validate = function (selection, sender) {
        // validation code
        // selection options: tasks, projects, folders, tags
        return (selection.projects.length > 0 || selection.tasks.length > 0)
    };

    return action;
})();